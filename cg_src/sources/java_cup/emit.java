package java_cup;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.Stack;
import org.apache.commons.cli.HelpFormatter;
import soot.coffi.Instruction;
import soot.jimple.Jimple;
/* loaded from: gencallgraphv3.jar:java_cup-0.9.2.jar:java_cup/emit.class */
public class emit {
    protected static boolean _lr_values;
    protected static boolean _locations;
    protected static boolean _xmlactions;
    protected static boolean _genericlabels;
    static final int UPPERLIMIT = 300;
    private static final boolean UNPACK_FROM_STRING = false;
    public static String prefix = "CUP$";
    public static String package_name = null;
    public static String symbol_const_class_name = "sym";
    public static String parser_class_name = "parser";
    public static String class_type_argument = null;
    public static String action_code = null;
    public static String parser_code = null;
    public static String init_code = null;
    public static String scan_code = null;
    public static production start_production = null;
    public static Stack import_list = new Stack();
    public static int num_conflicts = 0;
    public static boolean nowarn = false;
    public static int not_reduced = 0;
    public static int unused_term = 0;
    public static int unused_non_term = 0;
    public static long symbols_time = 0;
    public static long parser_time = 0;
    public static long action_code_time = 0;
    public static long production_table_time = 0;
    public static long action_table_time = 0;
    public static long goto_table_time = 0;
    static int array_number = 0;

    private emit() {
    }

    public static boolean lr_values() {
        return _lr_values;
    }

    public static boolean locations() {
        return _locations;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void set_lr_values(boolean b) {
        _lr_values = b;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void set_locations(boolean b) {
        _locations = b;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void set_genericlabels(boolean b) {
        _genericlabels = b;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void set_xmlactions(boolean b) {
        _xmlactions = b;
        if (b) {
            _locations = true;
            _lr_values = true;
        }
    }

    public static void clear() {
        _genericlabels = false;
        _xmlactions = false;
        _locations = false;
        _lr_values = true;
        action_code = null;
        import_list = new Stack();
        init_code = null;
        not_reduced = 0;
        num_conflicts = 0;
        package_name = null;
        parser_class_name = "parser";
        parser_code = null;
        scan_code = null;
        start_production = null;
        symbol_const_class_name = "sym";
        unused_non_term = 0;
        unused_term = 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static String pre(String str) {
        return prefix + parser_class_name + "$" + str;
    }

    protected static String typeArgument() {
        return class_type_argument == null ? "" : "<" + class_type_argument + ">";
    }

    protected static void emit_package(PrintWriter out) {
        if (package_name != null) {
            out.println("package " + package_name + ";");
            out.println();
        }
    }

    public static void symbols(PrintWriter out, boolean emit_non_terms, boolean sym_interface) {
        String class_or_interface = sym_interface ? "interface" : "class";
        long start_time = System.currentTimeMillis();
        out.println();
        out.println("//----------------------------------------------------");
        out.println("// The following code was generated by CUP v0.11b beta 20140226");
        out.println("//----------------------------------------------------");
        out.println();
        emit_package(out);
        out.println("/** CUP generated " + class_or_interface + " containing symbol constants. */");
        out.println("public " + class_or_interface + Instruction.argsep + symbol_const_class_name + " {");
        out.println("  /* terminals */");
        Enumeration e = terminal.all();
        while (e.hasMoreElements()) {
            terminal term = (terminal) e.nextElement();
            out.println("  public static final int " + term.name() + " = " + term.index() + ";");
        }
        out.println("  public static final String[] terminalNames = new String[] {");
        for (int i = 0; i < terminal.number(); i++) {
            out.print("  \"");
            out.print(terminal.find(i).name());
            out.print("\"");
            if (i < terminal.number() - 1) {
                out.print(",");
            }
            out.println();
        }
        out.println("  };");
        if (emit_non_terms) {
            out.println();
            out.println("  /* non terminals */");
            Enumeration e2 = non_terminal.all();
            while (e2.hasMoreElements()) {
                non_terminal nt = (non_terminal) e2.nextElement();
                out.println("  static final int " + nt.name() + " = " + nt.index() + ";");
            }
        }
        out.println("}");
        out.println();
        symbols_time = System.currentTimeMillis() - start_time;
    }

    protected static void emit_action_code(PrintWriter out, production start_prod) throws internal_error {
        String leftstring;
        int lastResult;
        long start_time = System.currentTimeMillis();
        out.println();
        out.println("/** Cup generated class to encapsulate user supplied action code.*/");
        out.println("@SuppressWarnings({\"rawtypes\", \"unchecked\", \"unused\"})");
        out.println("class " + pre("actions") + typeArgument() + " {");
        if (action_code != null) {
            out.println();
            out.println(action_code);
        }
        out.println("  private final " + parser_class_name + typeArgument() + " parser;");
        out.println();
        out.println("  /** Constructor */");
        out.println("  " + pre("actions") + "(" + parser_class_name + typeArgument() + " parser) {");
        out.println("    this.parser = parser;");
        out.println("  }");
        out.println();
        for (int instancecounter = 0; instancecounter <= production.number() / 300; instancecounter++) {
            out.println("  /** Method " + instancecounter + " with the actual generated action code for actions " + (instancecounter * 300) + " to " + ((instancecounter + 1) * 300) + ". */");
            out.println("  public final java_cup.runtime.Symbol " + pre("do_action_part") + String.format("%08d", new Integer(instancecounter)) + "(");
            out.println("    int                        " + pre("act_num,"));
            out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
            out.println("    java.util.Stack            " + pre("stack,"));
            out.println("    int                        " + pre("top)"));
            out.println("    throws java.lang.Exception");
            out.println("    {");
            out.println("      /* Symbol object for return from actions */");
            out.println("      java_cup.runtime.Symbol " + pre("result") + ";");
            out.println();
            out.println("      /* select the action based on the action number */");
            out.println("      switch (" + pre("act_num") + ")");
            out.println("        {");
            int proditeration = instancecounter * 300;
            production find = production.find(proditeration);
            while (true) {
                production prod = find;
                if (proditeration < Math.min((instancecounter + 1) * 300, production.number())) {
                    out.println("          /*. . . . . . . . . . . . . . . . . . . .*/");
                    out.println("          case " + prod.index() + ": // " + prod.to_simple_string());
                    out.println("            {");
                    String result = Jimple.NULL;
                    if ((prod instanceof action_production) && (lastResult = ((action_production) prod).getIndexOfIntermediateResult()) != -1) {
                        result = "(" + prod.lhs().the_symbol().stack_type() + ") ((java_cup.runtime.Symbol) " + pre("stack") + (lastResult == 1 ? ".peek()" : ".elementAt(" + pre("top") + HelpFormatter.DEFAULT_OPT_PREFIX + (lastResult - 1) + ")") + ").value";
                    }
                    out.println("              " + prod.lhs().the_symbol().stack_type() + " RESULT =" + result + ";");
                    int i = prod.rhs_length() - 1;
                    while (true) {
                        if (i < 0) {
                            break;
                        }
                        if (prod.rhs(i) instanceof symbol_part) {
                            symbol s = ((symbol_part) prod.rhs(i)).the_symbol();
                            if ((s instanceof non_terminal) && ((non_terminal) s).is_embedded_action) {
                                int index = (prod.rhs_length() - i) - 1;
                                out.println("              // propagate RESULT from " + s.name());
                                out.println("                RESULT = (" + prod.lhs().the_symbol().stack_type() + ") ((java_cup.runtime.Symbol) " + pre("stack") + (index == 0 ? ".peek()" : ".elementAt(" + pre("top") + HelpFormatter.DEFAULT_OPT_PREFIX + index + ")") + ").value;");
                            }
                        }
                        i--;
                    }
                    if (prod.action() != null && prod.action().code_string() != null && !prod.action().equals("")) {
                        out.println(prod.action().code_string() + ";");
                    }
                    if (lr_values()) {
                        String rightstring = "((java_cup.runtime.Symbol)" + pre("stack") + ".peek())";
                        if (prod.rhs_length() == 0) {
                            leftstring = rightstring;
                        } else {
                            int loffset = prod.rhs_length() - 1;
                            leftstring = "((java_cup.runtime.Symbol)" + pre("stack") + (loffset == 0 ? ".peek()" : ".elementAt(" + pre("top") + HelpFormatter.DEFAULT_OPT_PREFIX + loffset + ")") + ")";
                        }
                        out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(\"" + prod.lhs().the_symbol().name() + "\"," + prod.lhs().the_symbol().index() + ", " + leftstring + (prod.rhs_length() == 0 ? "" : ", " + rightstring) + ", RESULT);");
                    } else {
                        out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(\"" + prod.lhs().the_symbol().name() + "\"," + prod.lhs().the_symbol().index() + ", RESULT);");
                    }
                    out.println("            }");
                    if (prod == start_prod) {
                        out.println("          /* ACCEPT */");
                        out.println("          " + pre("parser") + ".done_parsing();");
                    }
                    out.println("          return " + pre("result") + ";");
                    out.println();
                    proditeration++;
                    find = production.find(proditeration);
                }
            }
            out.println("          /* . . . . . .*/");
            out.println("          default:");
            out.println("            throw new Exception(");
            out.println("               \"Invalid action number \"+" + pre("act_num") + "+\"found in internal parse table\");");
            out.println();
            out.println("        }");
            out.println("    } /* end of method */");
        }
        out.println();
        out.println("  /** Method splitting the generated action code into several parts. */");
        out.println("  public final java_cup.runtime.Symbol " + pre("do_action") + "(");
        out.println("    int                        " + pre("act_num,"));
        out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
        out.println("    java.util.Stack            " + pre("stack,"));
        out.println("    int                        " + pre("top)"));
        out.println("    throws java.lang.Exception");
        out.println("    {");
        if (production.number() < 300) {
            out.println("              return " + pre("do_action_part") + String.format("%08d", new Integer(0)) + "(");
            out.println("                               " + pre("act_num,"));
            out.println("                               " + pre("parser,"));
            out.println("                               " + pre("stack,"));
            out.println("                               " + pre("top);"));
            out.println("    }");
            out.println("}");
            out.println();
            action_code_time = System.currentTimeMillis() - start_time;
            return;
        }
        out.println("      /* select the action handler based on the action number */");
        out.println("      switch (" + pre("act_num") + "/300)");
        out.println("        {");
        for (int instancecounter2 = 0; instancecounter2 <= production.number() / 300; instancecounter2++) {
            out.println("          /*. . . . . . . . " + (instancecounter2 * 300) + " < #action < " + ((instancecounter2 + 1) * 300) + ". . . . . . . . . . . .*/");
            out.println("          case " + instancecounter2 + ": ");
            out.println("              return " + pre("do_action_part") + String.format("%08d", new Integer(instancecounter2)) + "(");
            out.println("                               " + pre("act_num,"));
            out.println("                               " + pre("parser,"));
            out.println("                               " + pre("stack,"));
            out.println("                               " + pre("top);"));
        }
        out.println("          /* . . . no valid action number: . . .*/");
        out.println("          default:");
        out.println("            throw new Exception(\"Invalid action number found in internal parse table\");");
        out.println();
        out.println("        }      /* end of switch */");
        out.println("    }");
        out.println("}");
        out.println();
        action_code_time = System.currentTimeMillis() - start_time;
    }

    protected static void emit_production_table(PrintWriter out) {
        long start_time = System.currentTimeMillis();
        production[] all_prods = new production[production.number()];
        Enumeration p = production.all();
        while (p.hasMoreElements()) {
            production prod = (production) p.nextElement();
            all_prods[prod.index()] = prod;
        }
        short[][] prod_table = new short[production.number()][2];
        for (int i = 0; i < production.number(); i++) {
            production prod2 = all_prods[i];
            prod_table[i][0] = (short) prod2.lhs().the_symbol().index();
            prod_table[i][1] = (short) prod2.rhs_length();
        }
        out.println();
        out.println("  /** Production table. */");
        out.println("  protected static final short _production_table[][] = ");
        read_table_from_file(out, prod_table);
        out.println();
        out.println("  /** Access to production table. */");
        out.println("  public short[][] production_table() {return _production_table;}");
        out.println();
        out.println("public static short[][] getFromFile(String filename) {");
        out.println("    try {");
        out.println("\t    ClassLoader cl = java_cup.parser.class.getClassLoader();");
        out.println("       InputStream is = cl.getResourceAsStream(filename);");
        out.println("   \tObjectInputStream ois = new ObjectInputStream(is);");
        out.println("   \tshort[][] sa2 = (short[][]) ois.readObject();");
        out.println("   \treturn sa2;");
        out.println("  } catch (Throwable t) {");
        out.println("    throw new RuntimeException(\"oups: \" + t);");
        out.println("  }");
        out.println("}");
        production_table_time = System.currentTimeMillis() - start_time;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v3, types: [short[], short[][]] */
    protected static void do_action_table(PrintWriter out, parse_action_table act_tab, boolean compact_reduces) throws internal_error {
        long start_time = System.currentTimeMillis();
        ?? r0 = new short[act_tab.num_states()];
        for (int i = 0; i < act_tab.num_states(); i++) {
            parse_action_row row = act_tab.under_state[i];
            if (compact_reduces) {
                row.compute_default();
            } else {
                row.default_reduce = -1;
            }
            short[] temp_table = new short[2 * parse_action_row.size()];
            int nentries = 0;
            for (int j = 0; j < parse_action_row.size(); j++) {
                parse_action act = row.under_term[j];
                if (act.kind() != 0) {
                    if (act.kind() == 1) {
                        int i2 = nentries;
                        int nentries2 = nentries + 1;
                        temp_table[i2] = (short) j;
                        nentries = nentries2 + 1;
                        temp_table[nentries2] = (short) (((shift_action) act).shift_to().index() + 1);
                    } else if (act.kind() == 2) {
                        int red = ((reduce_action) act).reduce_with().index();
                        if (red != row.default_reduce) {
                            int i3 = nentries;
                            int nentries3 = nentries + 1;
                            temp_table[i3] = (short) j;
                            nentries = nentries3 + 1;
                            temp_table[nentries3] = (short) (-(red + 1));
                        }
                    } else if (act.kind() != 3) {
                        throw new internal_error("Unrecognized action code " + act.kind() + " found in parse table");
                    }
                }
            }
            r0[i] = new short[nentries + 2];
            System.arraycopy(temp_table, 0, r0[i], 0, nentries);
            int i4 = nentries;
            int nentries4 = nentries + 1;
            r0[i][i4] = -1;
            if (row.default_reduce != -1) {
                int i5 = nentries4 + 1;
                r0[i][nentries4] = (short) (-(row.default_reduce + 1));
            } else {
                int i6 = nentries4 + 1;
                r0[i][nentries4] = 0;
            }
        }
        out.println();
        out.println("  /** Parse-action table. */");
        out.println("  protected static final short[][] _action_table = ");
        read_table_from_file(out, r0);
        out.println();
        out.println("  /** Access to parse-action table. */");
        out.println("  public short[][] action_table() {return _action_table;}");
        action_table_time = System.currentTimeMillis() - start_time;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v3, types: [short[], short[][]] */
    protected static void do_reduce_table(PrintWriter out, parse_reduce_table red_tab) {
        long start_time = System.currentTimeMillis();
        ?? r0 = new short[red_tab.num_states()];
        for (int i = 0; i < red_tab.num_states(); i++) {
            short[] temp_table = new short[2 * parse_reduce_row.size()];
            int nentries = 0;
            for (int j = 0; j < parse_reduce_row.size(); j++) {
                lalr_state goto_st = red_tab.under_state[i].under_non_term[j];
                if (goto_st != null) {
                    int i2 = nentries;
                    int nentries2 = nentries + 1;
                    temp_table[i2] = (short) j;
                    nentries = nentries2 + 1;
                    temp_table[nentries2] = (short) goto_st.index();
                }
            }
            r0[i] = new short[nentries + 2];
            System.arraycopy(temp_table, 0, r0[i], 0, nentries);
            int i3 = nentries;
            int nentries3 = nentries + 1;
            r0[i][i3] = -1;
            int i4 = nentries3 + 1;
            r0[i][nentries3] = -1;
        }
        out.println();
        out.println("  /** <code>reduce_goto</code> table. */");
        out.println("  protected static final short[][] _reduce_table = ");
        read_table_from_file(out, r0);
        out.println();
        out.println("  /** Access to <code>reduce_goto</code> table. */");
        out.println("  public short[][] reduce_table() {return _reduce_table;}");
        out.println();
        goto_table_time = System.currentTimeMillis() - start_time;
    }

    protected static void do_table_as_string(PrintWriter out, short[][] sa) {
        out.println("new String[] {");
        out.print("    \"");
        int nbytes = 0 + do_escaped(out, (char) (sa.length >> 16));
        int nchar = do_newline(out, 0, nbytes);
        int nbytes2 = nbytes + do_escaped(out, (char) (sa.length & 65535));
        int nchar2 = do_newline(out, nchar, nbytes2);
        for (int i = 0; i < sa.length; i++) {
            int nbytes3 = nbytes2 + do_escaped(out, (char) (sa[i].length >> 16));
            int nchar3 = do_newline(out, nchar2, nbytes3);
            nbytes2 = nbytes3 + do_escaped(out, (char) (sa[i].length & 65535));
            nchar2 = do_newline(out, nchar3, nbytes2);
            for (int j = 0; j < sa[i].length; j++) {
                nbytes2 += do_escaped(out, (char) (2 + sa[i][j]));
                nchar2 = do_newline(out, nchar2, nbytes2);
            }
        }
        out.print("\" }");
    }

    protected static void read_table_from_file(PrintWriter out, short[][] sa) {
        StringBuilder append = new StringBuilder().append("tables.out/shortarray_");
        int i = array_number;
        array_number = i + 1;
        String filename = append.append(i).append(".obj").toString();
        File f = new File(filename);
        try {
            f.getParentFile().mkdirs();
            f.createNewFile();
            new FileWriter(new File(filename));
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
            oos.writeObject(sa);
            oos.close();
            out.println("getFromFile(\"" + filename + "\");");
        } catch (Throwable t) {
            throw new RuntimeException("t" + t);
        }
    }

    protected static int do_newline(PrintWriter out, int nchar, int nbytes) {
        if (nbytes <= 65500) {
            if (nchar <= 11) {
                return nchar + 1;
            }
            out.println("\" +");
            out.print("    \"");
            return 0;
        }
        out.println("\", ");
        out.print("    \"");
        return 0;
    }

    protected static int do_escaped(PrintWriter out, char c) {
        StringBuffer escape = new StringBuffer();
        if (c <= 255) {
            escape.append(Integer.toOctalString(c));
            while (escape.length() < 3) {
                escape.insert(0, '0');
            }
        } else {
            escape.append(Integer.toHexString(c));
            while (escape.length() < 4) {
                escape.insert(0, '0');
            }
            escape.insert(0, 'u');
        }
        escape.insert(0, '\\');
        out.print(escape.toString());
        if (c == 0) {
            return 2;
        }
        if (c < 1 || c > 127) {
            return (c < 128 || c > 2047) ? 3 : 2;
        }
        return 1;
    }

    public static void parser(PrintWriter out, parse_action_table action_table, parse_reduce_table reduce_table, int start_st, production start_prod, boolean compact_reduces, boolean suppress_scanner) throws internal_error {
        long start_time = System.currentTimeMillis();
        out.println();
        out.println("//----------------------------------------------------");
        out.println("// The following code was generated by CUP v0.11b beta 20140226");
        out.println("//----------------------------------------------------");
        out.println();
        emit_package(out);
        import_list.add("java.util.List");
        import_list.add("java.util.ArrayList");
        import_list.add("java.io.FileReader");
        import_list.add("java.io.File");
        import_list.add("java.io.ObjectInputStream");
        import_list.add("java.io.FileInputStream");
        for (int i = 0; i < import_list.size(); i++) {
            out.println("import " + import_list.elementAt(i) + ";");
        }
        if (locations()) {
            out.println("import java_cup.runtime.ComplexSymbolFactory.Location;");
        }
        out.println("import java_cup.runtime.XMLElement;");
        out.println();
        out.println("/** CUP v0.11b beta 20140226 generated parser.");
        out.println("  */");
        out.println("@SuppressWarnings({\"rawtypes\"})");
        out.println("public class " + parser_class_name + typeArgument() + " extends java_cup.runtime.lr_parser {");
        out.println();
        out.println(" public final Class getSymbolContainer() {");
        out.println("    return " + symbol_const_class_name + ".class;");
        out.println("}");
        out.println();
        out.println("  /** Default constructor. */");
        out.println("  @Deprecated");
        out.println("  public " + parser_class_name + "() {super();}");
        if (!suppress_scanner) {
            out.println();
            out.println("  /** Constructor which sets the default scanner. */");
            out.println("  @Deprecated");
            out.println("  public " + parser_class_name + "(java_cup.runtime.Scanner s) {super(s);}");
            out.println();
            out.println("  /** Constructor which sets the default scanner. */");
            out.println("  public " + parser_class_name + "(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}");
        }
        emit_production_table(out);
        do_action_table(out, action_table, compact_reduces);
        do_reduce_table(out, reduce_table);
        out.println("  /** Instance of action encapsulation class. */");
        out.println("  protected " + pre("actions") + " action_obj;");
        out.println();
        out.println("  /** Action encapsulation object initializer. */");
        out.println("  protected void init_actions()");
        out.println("    {");
        out.println("      action_obj = new " + pre("actions") + typeArgument() + "(this);");
        out.println("    }");
        out.println();
        out.println("  /** Invoke a user supplied parse action. */");
        out.println("  public java_cup.runtime.Symbol do_action(");
        out.println("    int                        act_num,");
        out.println("    java_cup.runtime.lr_parser parser,");
        out.println("    java.util.Stack            stack,");
        out.println("    int                        top)");
        out.println("    throws java.lang.Exception");
        out.println("  {");
        out.println("    /* call code in generated class */");
        out.println("    return action_obj." + pre("do_action(") + "act_num, parser, stack, top);");
        out.println("  }");
        out.println("");
        out.println("  /** Indicates start state. */");
        out.println("  public int start_state() {return " + start_st + ";}");
        out.println("  /** Indicates start production. */");
        out.println("  public int start_production() {return " + start_production.index() + ";}");
        out.println();
        out.println("  /** <code>EOF</code> Symbol index. */");
        out.println("  public int EOF_sym() {return " + terminal.EOF.index() + ";}");
        out.println();
        out.println("  /** <code>error</code> Symbol index. */");
        out.println("  public int error_sym() {return " + terminal.error.index() + ";}");
        out.println();
        if (init_code != null) {
            out.println();
            out.println("  /** User initialization code. */");
            out.println("  public void user_init() throws java.lang.Exception");
            out.println("    {");
            out.println(init_code);
            out.println("    }");
        }
        if (scan_code != null) {
            out.println();
            out.println("  /** Scan to get the next Symbol. */");
            out.println("  public java_cup.runtime.Symbol scan()");
            out.println("    throws java.lang.Exception");
            out.println("    {");
            out.println(scan_code);
            out.println("    }");
        }
        if (parser_code != null) {
            out.println();
            out.println(parser_code);
        }
        if (!_xmlactions) {
            emit_action_code(out, start_prod);
        } else {
            emit_xmlaction_code(out, start_prod);
        }
        out.println("}");
        parser_time = System.currentTimeMillis() - start_time;
    }

    protected static void emit_xmlaction_code(PrintWriter out, production start_prod) throws internal_error {
        String leftstring;
        long start_time = System.currentTimeMillis();
        out.println();
        out.println("/** Cup generated class to encapsulate user supplied action code.*/");
        out.println("@SuppressWarnings({\"rawtypes\", \"unchecked\", \"unused\"})");
        out.println("class " + pre("actions") + typeArgument() + " {");
        if (action_code != null) {
            out.println();
            out.println(action_code);
        }
        out.println("  private final " + parser_class_name + typeArgument() + " parser;");
        out.println();
        out.println("  /** Constructor */");
        out.println("  " + pre("actions") + "(" + parser_class_name + typeArgument() + " parser) {");
        out.println("    this.parser = parser;");
        out.println("  }");
        out.println();
        for (int instancecounter = 0; instancecounter <= production.number() / 300; instancecounter++) {
            out.println("  /** Method " + instancecounter + " with the actual generated action code for actions " + (instancecounter * 300) + " to " + ((instancecounter + 1) * 300) + ". */");
            out.println("  public final java_cup.runtime.Symbol " + pre("do_action_part") + String.format("%08d", new Integer(instancecounter)) + "(");
            out.println("    int                        " + pre("act_num,"));
            out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
            out.println("    java.util.Stack            " + pre("stack,"));
            out.println("    int                        " + pre("top)"));
            out.println("    throws java.lang.Exception");
            out.println("    {");
            out.println("      /* Symbol object for return from actions */");
            out.println("      java_cup.runtime.Symbol " + pre("result") + ";");
            out.println();
            out.println("      /* select the action based on the action number */");
            out.println("      switch (" + pre("act_num") + ")");
            out.println("        {");
            int proditeration = instancecounter * 300;
            production find = production.find(proditeration);
            while (true) {
                production prod = find;
                if (proditeration < Math.min((instancecounter + 1) * 300, production.number())) {
                    out.println("          /*. . . . . . . . . . . . . . . . . . . .*/");
                    out.println("          case " + prod.index() + ": // " + prod.to_simple_string());
                    out.println("            {");
                    out.println("                XMLElement RESULT;");
                    String nested = "";
                    for (int rhsi = 0; rhsi < prod.rhs_length(); rhsi++) {
                        if (prod.rhs(rhsi) instanceof symbol_part) {
                            String label = prod.rhs(rhsi).label();
                            symbol_part sym = (symbol_part) prod.rhs(rhsi);
                            if (label == null) {
                                if (_genericlabels) {
                                    label = sym.the_symbol().name() + rhsi;
                                }
                            }
                            if (sym.the_symbol().is_non_term()) {
                                nested = nested + ",(XMLElement)" + label;
                            } else {
                                nested = nested + ",new XMLElement.Terminal(" + label + "xleft,\"" + label + "\"," + label + "," + label + "xright)";
                            }
                        }
                    }
                    if (prod.action() != null && prod.action().code_string() != null && !prod.action().equals("")) {
                        out.println(prod.action().code_string());
                    }
                    int variant = 0;
                    for (int i = 0; i < proditeration; i++) {
                        if (production.find(i).lhs().equals(prod.lhs())) {
                            variant++;
                        }
                    }
                    String lhsname = prod.lhs().the_symbol().name().replace('$', '_');
                    out.println("                RESULT = new XMLElement.NonTerminal(\"" + lhsname + "\"," + variant + nested + ");");
                    if (lr_values()) {
                        String rightstring = "((java_cup.runtime.Symbol)" + pre("stack") + ".peek())";
                        if (prod.rhs_length() == 0) {
                            leftstring = rightstring;
                        } else {
                            int loffset = prod.rhs_length() - 1;
                            leftstring = "((java_cup.runtime.Symbol)" + pre("stack") + (loffset == 0 ? ".peek()" : ".elementAt(" + pre("top") + HelpFormatter.DEFAULT_OPT_PREFIX + loffset + ")") + ")";
                        }
                        out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(\"" + prod.lhs().the_symbol().name() + "\"," + prod.lhs().the_symbol().index() + ", " + leftstring + ", " + rightstring + ", RESULT);");
                    } else {
                        out.println("              " + pre("result") + " = parser.getSymbolFactory().newSymbol(\"" + prod.lhs().the_symbol().name() + "\"," + prod.lhs().the_symbol().index() + ", RESULT);");
                    }
                    out.println("            }");
                    if (prod == start_prod) {
                        out.println("          /* ACCEPT */");
                        out.println("          " + pre("parser") + ".done_parsing();");
                    }
                    out.println("          return " + pre("result") + ";");
                    out.println();
                    proditeration++;
                    find = production.find(proditeration);
                }
            }
            out.println("          /* . . . . . .*/");
            out.println("          default:");
            out.println("            throw new Exception(");
            out.println("               \"Invalid action number \"+" + pre("act_num") + "+\"found in internal parse table\");");
            out.println();
            out.println("        }");
            out.println("    } /* end of method */");
        }
        out.println();
        out.println("  /** Method splitting the generated action code into several parts. */");
        out.println("  public final java_cup.runtime.Symbol " + pre("do_action") + "(");
        out.println("    int                        " + pre("act_num,"));
        out.println("    java_cup.runtime.lr_parser " + pre("parser,"));
        out.println("    java.util.Stack            " + pre("stack,"));
        out.println("    int                        " + pre("top)"));
        out.println("    throws java.lang.Exception");
        out.println("    {");
        if (production.number() < 300) {
            out.println("              return " + pre("do_action_part") + String.format("%08d", new Integer(0)) + "(");
            out.println("                               " + pre("act_num,"));
            out.println("                               " + pre("parser,"));
            out.println("                               " + pre("stack,"));
            out.println("                               " + pre("top);"));
            out.println("    }");
            out.println("}");
            out.println();
            action_code_time = System.currentTimeMillis() - start_time;
            return;
        }
        out.println("      /* select the action handler based on the action number */");
        out.println("      switch (" + pre("act_num") + "/300)");
        out.println("        {");
        for (int instancecounter2 = 0; instancecounter2 <= production.number() / 300; instancecounter2++) {
            out.println("          /*. . . . . . . . " + (instancecounter2 * 300) + " < #action < " + ((instancecounter2 + 1) * 300) + ". . . . . . . . . . . .*/");
            out.println("          case " + instancecounter2 + ": ");
            out.println("              return " + pre("do_action_part") + String.format("%08d", new Integer(instancecounter2)) + "(");
            out.println("                               " + pre("act_num,"));
            out.println("                               " + pre("parser,"));
            out.println("                               " + pre("stack,"));
            out.println("                               " + pre("top);"));
        }
        out.println("          /* . . . no valid action number: . . .*/");
        out.println("          default:");
        out.println("            throw new Exception(\"Invalid action number found in internal parse table\");");
        out.println();
        out.println("        }      /* end of switch */");
        out.println("    }");
        out.println("}");
        out.println();
        action_code_time = System.currentTimeMillis() - start_time;
    }
}
