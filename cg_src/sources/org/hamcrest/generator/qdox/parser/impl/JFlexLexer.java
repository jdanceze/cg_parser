package org.hamcrest.generator.qdox.parser.impl;

import jasmin.sym;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.Stack;
import org.hamcrest.generator.qdox.parser.Lexer;
/* loaded from: gencallgraphv3.jar:hamcrest-all-1.3.jar:org/hamcrest/generator/qdox/parser/impl/JFlexLexer.class */
public class JFlexLexer implements Lexer {
    public static final int YYEOF = -1;
    private static final int ZZ_BUFFERSIZE = 16384;
    public static final int ENUM = 28;
    public static final int SINGLELINECOMMENT = 18;
    public static final int ASSIGNMENT = 12;
    public static final int ANNOTATION = 22;
    public static final int JAVADOCTAG = 4;
    public static final int STRING = 14;
    public static final int ANNOSTRING = 24;
    public static final int YYINITIAL = 0;
    public static final int MULTILINECOMMENT = 20;
    public static final int PARENBLOCK = 10;
    public static final int ANNOCHAR = 26;
    public static final int CODEBLOCK = 8;
    public static final int CHAR = 16;
    public static final int JAVADOC = 2;
    public static final int JAVADOCLINE = 6;
    private static final String ZZ_ACTION_PACKED_0 = "\u0013��\u0002\u0001\u0001\u0002\u0001\u0001\u0002\u0003\u0001\u0004\u0002\u0003\u0001\u0001\u0001\u0005\u0001\u0006\b\u0003\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0002\u0018\u0001\u0019\u0002\u0001\u0002\u001a\u0002\u0001\u0003\u001b\u0001\u001c\u0001\u001d\u0001\u0001\u0001\u001e\u0001\u001f\u0001\u001b\u0001 \u0001\u001b\u0001!\u0001\"\u0001#\u0001$\u0001%\u0001&\u0001'\u0001(\u0001)\u0001\u0001\u0001*\u0001\u0001\u0001+\u0002,\u0001\u0001\u0001-\u0002.\u0001\u0003\u0001/\u0001\u0004\u0002\u0003\u0001\u0005\u0005\u0003\u00010\u0001\n\u0001\u000b\u0001\f\u00011\u00012\u00013\u00014\u00015\u00016\u00017\u00018\u00019\u0001:\u0001;\u0001<\u0001=\u0001\u0001\u0001>\u0001\u0001\u0001?\u0001@\u0001A\u0005��\u0001B\u0001C\u0001��\u0002\u0003\u0001��\u0002\u0003\u0005��\u000e\u0003\u0001\u0016\u0001D\u0001E\u0001F\b��\u0001G\u0001B\u0001��\u0001H\u0001��\u0001I\u0001J\u0001K\u0001L\u0001M\u0002��\u0001N\u0001O\u0001N\u0001.\u0001��\u0001\u0003\u0001N\t\u0003\u0001P\u0001Q\u0001R\u0001S\u0001T\u0001U\u0001V\u0001W\u0001X\u0001Y\u0001Z\u0004��\u0002\u0003\u0001[\u0002\u0003\u0003��\u0001\\\u0002��\u0010\u0003\u0001��\u0001F\u0001]\u0001��\u0002]\u0001��\u0001^\u0001N\u0001��\u0001.\u0006\u0003\u0001_\u0003\u0003\u0001`\u0003��\u0001a\u0001b\u0003\u0003\u0003��\u0011\u0003\u0001c\u0001a\u0001d\u0003\u0003\u0001e\u0001f\u0001g\u0001\u0003\u0001h\u0001\u0003\u0001i\u0001\u0003\u0003��\u0005\u0003\u0001j\u0006\u0003\u0001k\u0004\u0003\u0001l\u0001\u0003\u0001m\u0001n\u0002\u0003\u0002��\u0001o\u0004\u0003\u0001p\u0003\u0003\u0001q\u0001\u0003\u0001r\u0002\u0003\u0001s\u0001t\u0001u\u0001v\u0001��\u0001w\u0001x\b\u0003\u0001��\u0001\u0003\u0001y\u0003\u0003\u0001z\u0001{\u0001\u0003\u0001��\u0001|\u0001\u0003\u0001}\u0001~\u0001\u0003\u0001\u007f\u0001\u0080\u0002\u0003\u0001\u0081";
    private static final String ZZ_ROWMAP_PACKED_0 = "������D��\u0088��Ì��Đ��Ŕ��Ƙ��ǜ��Ƞ��ɤ��ʨ��ˬ��̰��ʹ��θ��ϼ��р��҄��ӈ��Ԍ��Ր��Ԍ��֔��ט��\u061c��٠��ڤ��ۨ��ܬ��ݰ��Ԍ��\u07b4��߸��࠼��ࢀ��ࣄ��ई��ौ��ঐ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��\u09d4��Ԍ��Ԍ��Ԍ��Ԍ��ਘ��Ԍ��ੜ��Ԍ��ઠ��\u0ae4��ନ��୬��ர��௴��స��Ԍ��౼��ೀ��Ԍ��Ԍ��ೀ��Ԍ��Ԍ��ഄ��Ԍ��ൈ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��ඌ��Ԍ��ැ��Ԍ��ด��Ԍ��๘��ೀ��ຜ��\u0ee0��༤��Ԍ��ཨ��ྫྷ��\u0ff0��Ԍ��ဴ��ၸ��Ⴜ��ᄀ��ᅄ��Ԍ��ᆈ��ᇌ��ሐ��Ԍ��Ԍ��Ԍ��ቔ��Ԍ��Ԍ��Ԍ��ኘ��Ԍ��Ԍ��ዜ��Ԍ��Ԍ��ጠ��Ԍ��፤��Ԍ��Ԍ��Ԍ��ϼ��Ԍ��Ꭸ��Ꮼ��ᐰ��ᑴ��Ԍ��ܬ��ᒸ��ᓼ��ᕀ��ᖄ��ᗈ��ᘌ��ݰ��ᙐ��ᚔ��ᛘ��\u171c��ᝠ��ឤ��៨��ᠬ��ᡰ��ᢴ��\u18f8��\u193c��ᦀ��ᧄ��ᨈ��ᩌ��᪐��\u1ad4��Ԍ��Ԍ��ᬘ��ନ��᭜��ᮠ��ᯤ��ᰨ��ர��௴��స��ନ��ᱬ��ഄ��Ԍ��Ჰ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��᳴��ཨ��Ԍ��Ԍ��ᴸ��ᵼ��᷀��Ḅ��Ṉ��Ẍ��Ố��ἔ��\u1f58��ᾜ��ῠ��․��\u2068��€��Ԍ��Ԍ��⃰��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��Ԍ��ℴ��Ꮼ��ᐰ��ⅸ��↼��∀��Ԍ��≄��⊈��⋌��⌐��⍔��Ԍ��⎘��⏜��␠��⑤��⒨��⓬��┰��╴��▸��◼��♀��⚄��⛈��✌��❐��➔��⟘��⠜��\u1ad4��⡠��ନ��⢤��ᮠ��Ԍ��⣨��Ԍ��⤬��⥰��⦴��⧸��⨼��⪀��⫄��⬈��⭌��ט��⮐��⯔��Ⱈ��Ԍ��ⱜ��Ⲡ��ⳤ��Ⲡ��ט��\u2d28��\u2d6c��ⶰ��ⷴ��⸸��\u2e7c��⻀��⼄��⽈��⾌��⿐��〔��じ��゜��ム��ㄤ��ㅨ��ㆬ��ㇰ��㈴��㉸��㊼��㌀��ᬘ��Ԍ��ט��㍄��㎈��㏌��ט��ט��ט��㐐��Ԍ��㑔��ט��㒘��㓜��㔠��㕤��㖨��㗬��㘰��㙴��㚸��ט��㛼��㝀��㞄��㟈��㠌��㡐��ט��㢔��㣘��㤜��㥠��ט��㦤��ט��ט��㧨��㨬��㩰��㪴��ט��㫸��㬼��㮀��㯄��ט��㰈��㱌��㲐��ט��㳔��ט��㴘��㵜��ט��ט��ט��ט��㶠��ט��ט��㷤��㸨��㹬��㺰��㻴��㼸��㽼��㿀��䀄��䁈��ט��䂌��䃐��䄔��ט��ט��䅘��䆜��ט��䇠��ט��ט��䈤��ᙐ��ט��䉨��䊬��ט";
    private static final String ZZ_TRANS_PACKED_0 = "\u0001\u0014\u0001\u0015\u0002\u0014\u0001\u0016\u0001\u0014\u0001\u0017\u0002\u0014\u0003\u0018\u0001\u0014\u0001\u0018\u0001\u0019\u0001\u0018\u0001\u0014\u0001\u001a\u0001\u001b\u0001\u0018\u0001\u001c\u0001\u0018\u0001\u001d\u0002\u0018\u0001\u0014\u0001\u001e\u0001\u001f\u0001 \u0001!\u0001\"\u0002\u0018\u0001#\u0003\u0018\u0001$\u0001\u0018\u0001%\u0001&\u0001'\u0005\u0018\u0001(\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0001/\u00010\u00011\u00012\u00013\u00014\u00015\u0007\u0014\u00016\u0001\u0015\u00026\u00017\u0001\u0014\u00146\u00018)6\u0001\u0014\u00019\u0001:\u0002\u0014\u0001;\u0014\u0014\u0001<)\u0014\u0001=\u0001>\u0001?\u0001=\u0001@\u0001A>=\u0001B\u0001C\u0004B\u0001D0B\u0001E\u0001F\u0002B\u00014\u00015\u0007B\u0001\u0014\u0001\u0015\u0004\u0014\u0001G*\u0014\u0001H\u0004\u0014\u0001I\u0004\u0014\u00014\u00015\u0007\u0014\u0001B\u0001C\u0004B\u0001D\nB\u0001J\tB\u0001K\rB\u0001L\u0005B\u0001M\u0001N\u0001O\u0001P\u0001Q\u0002B\u0001R\u0001S\u0001T\u0001B\u0001U\u00014\u00015\u0007B\u0001\u0014\u0001\u0015\u0014\u0014\u0001V$\u0014\u0001W\t\u0014\u0001\u0015\u0014\u0014\u0001X%\u0014\u0001Y\b\u0014\u0001Z\u0001[B\u0014\u0001\u0015\u0002\u0014\u0001\\@\u0014\u0001\u0015\u0002\u0014\u0001\u0016\u0001\u0014\u0001]\u0001^\u0001_\u0001\u0018\u0001`\u0001\u0018\u0001^\u0003\u0018\u0001a\u0001b\u0001c\u0001\u0018\u0001d\u0001\u0018\u0001\u001d\u0002\u0018\u0001\u0014\u0001e\u0001\u001f\u0002\u0018\u0001f\u0002\u0018\u0001g\u0003\u0018\u0001h\u0001i\u0001\u0018\u0001j\u0006\u0018\u0002\u0014\u0001k\u0001l\u0001m\u0001n\u0001.\u0001o\u0001p\u0001q\u0001r\u0001\u0014\u0001s\u0001t\u0001u\u0001v\u0001w\u0001x\u0001y\u0001z\u0001{\u0001\u0014\u0001\u0015\u0014\u0014\u0001|$\u0014\u0001}\t\u0014\u0001\u0015\u0014\u0014\u0001~%\u0014\u0001\u007f\b\u0014\u0001\u0015\u0002\u0014\u0001\u0016\u0001\u0014\u0001\u0017\u0002\u0014\u0003\u0018\u0001\u0014\u0001\u0018\u0001\u0019\u0001\u0018\u0001\u0014\u0001\u001a\u0001\u001b\u0001\u0018\u0001\u001c\u0001\u0018\u0001\u001d\u0002\u0018\u0001\u0014\u0001\u001e\u0001\u001f\u0001 \u0001!\u0001\"\u0002\u0018\u0001#\u0003\u0018\u0001$\u0001\u0018\u0001%\u0001&\u0001'\u0005\u0018\u0001(\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0001\u0080\u00010\u00011\u00012\u0001\u0081\u00014\u00015\u0007\u0014\u0002\u0082\u0001\u0083\u0001\u0082\u0002\u0010>\u0082\u0006��\u0001\u0084W��\u0001\u0085/��\u0001\u0086\u0083��\u0001\u0014E��\u0001\u0087\u0001��\u0001\u0088D��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001\u008a\u0004\u0018\u0001\u008b&��\u0001\u008c9��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001\u008d\r\u0018\u001c��\u0007\u0018\u0001\u008e\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018,��\u0001\u008f-��\u0003\u0090\u0001��\u0001\u0090\u0003��\u0003\u0091\u0001��\u0003\u0091\u0002��\u0004\u0091\u0001\u0092\u0002\u0091\u0003��\u0005\u0091\u0001\u0093\r\u0091\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001\u0094\u0002\u0018\u0002��\u0001\u0018\u0001\u0095\u0006\u0018\u0001\u0096\n\u0018\u001c��\u0003\u0018\u0001\u0097\u0005\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001\u0098\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0006\u0018\u0001\u0099\u0006\u0018\u0001\u009a\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001\u009b\u0006\u0018\u0001\u009c\u0003\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001\u009d\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001\u009e\u0002\u0018\u0002��\t\u0018\u0001\u009f\u0004\u0018\u0001 \u0004\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001¡\u0011\u0018\u0016��\u00032\u0001��\u00012B��\u00017\u0001¢\u0001£\u0013��\u0001¤+��\u0001:F��\u0001;>��\u0001¥\u0002��\u0002¥\u0001��>¥\u0001¦\u0001>\u0001?\u0001¦\u0001§?¦\u0002¨\u0001?\u0001¨\u0001©?¨\u0004��\u0001ª\u0001«>��\u0001¦\u0001>\u0001?\u0001¦\u0001¬\u0001\u00ad\u0001®>¦\u0001>\u0001?\u0001¦\u0002\u00ad>¦\u0002��\u0001BE��\u0001¯\u0001��\u0001\u0088>��\u0002°\u0002��\u0001°,��\u0001±\u001f��\u0001²K��\u0001³$��\u0001´\u001e��\u0001³%��\u0001µ\t��\u0001[G��\u0001¶D��\u0002^\u0003��\u0001^\u0001·\u0002¸\u0001��\u0001¹\u0002º\u0002»\u0010��\u0001·$��\u0001¼\u0001½\u0001¾\u0002��\u0001½\u0001·\u0002¸\u0001��\u0001¹\u0002º\u0002»\u0010��\u0001·\u0007��\u0001¾\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u000e\u0018\u0001¿\u0004\u0018\u001c��\u0002À\u0003��\u0001À>��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Á\b\u0018\u0001Â\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001Ã\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001Ä\u0004\u0018\u0001Å\u0003\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001Æ\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ç\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001È\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u000f\u0018\u0001É\u0003\u0018G��\u0001Ê\u0006��\u0001Ë=��\u0001Ì\u0005��\u0001Í>��\u0001ÎH��\u0001ÏC��\u0001ÐK��\u0001Ñ\u0018��\u0001Ò$��\u0001Ó\u001e��\u0001Ò%��\u0001Ô\u000b��\u0001Õ?��\u0001Ö\u0002��\u0002Ö\u0001��>Ö\u0004��\u0001×C��\u0001ØF��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001Ù\u0002\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Ú\t\u0018&��\u0001Û9��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001Ü\u0005\u0018\u001c��\t\u0018\u0002��\u0001Ý\u0003\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\u0002Þ\u0001��\u0003Þ\u0001��\u0002Þ\u0002��\u0004Þ\u0007��\u0002Þ&��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\u0013\u0091\u0007��\u0001á$��\u0001â-��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\r\u0091\u0001ã\u0005\u0091\u0007��\u0001á\u0014��\u0003\u0018\u0001ä\u0005\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001å\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001æ\u0001\u0018\u0001ç\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001è\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001é\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001ê\u0012\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ë\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001ì\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001í\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001î\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001ï\u0012\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001ð\u0006\u0018\u0001ñ\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001ò\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ó\t\u0018\u001a��\u0001ô\u0014��\u0001¤)��\u0001¥\u0002��\u0001¥\u0001õ\u0001��>¥\u0001¦\u0001>\u0001?\u0001¦\u0001§\u0001\u00ad\u0001ö=¦\u0002¨\u0001«\u0001¨\u0001©A¨\u0001«\u0001¨\u0001©\u0001÷\u0001ø=¨\u0004��\u0001ª\u0001��\u0001ùA��\u0001úl��\u0001û\u001d��\u0002ü\u0003��\u0001ü\u0003��\u0001ý/��\u0001ý\n��\u0002¼\u0003��\u0001¼\u0001��\u0002¸\u0001��\u0001¹\u0002º\u0002»5��\u0001¼\u0001½\u0003��\u0001½\u0001·\u0002¸\u0001��\u0001¹\u0002º\u0002»\u0010��\u0001·$��\u0002þ\u0001��\u0003þ\u0001��\u0002þ\u0002��\u0004þ\u0007��\u0002þ,��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ÿ\t\u0018\u001c��\u0002À\u0003��\u0001À\u0001��\u0002¸\u0002��\u0002º\u0002»5��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001Ā\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001ā\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001Ă\u0002\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001ă\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Ą\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ą\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001Ć\u0002\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001ć\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001Ĉ\u000b\u0018H��\u0001ĉ\u0014��\u0001Õ\u0001Ċ>��\u0004ċ\u0001Č\u0001ċ\u0001č=ċ\u0007��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0006\u0018\u0001Ď\f\u0018\u001c��\u0007\u0018\u0001ď\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Đ\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001đ\u0011\u0018\u001c��\u0002Ē\u0001��\u0003Ē\u0001��\u0002Ē\u0002��\u0004Ē\u0007��\u0002Ē&��\u0003ß\u0001��\u0001ß0��\u0001á\u0016��\u0003\u0091\u0001��\u0003\u0091\u0002��\u0004\u0091\u0001\u0092\u0002\u0091\u0003��\u0013\u0091\u001c��\u0002ē\u0001��\u0003ē\u0001��\u0002ē\u0002��\u0004ē\u0007��\u0002ē&��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\t\u0091\u0001Ĕ\t\u0091\u0007��\u0001á\u0014��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001ĕ\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0003\u0018\u0001Ė\u000f\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u000b\u0018\u0001ė\u0007\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Ę\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ę\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001Ě\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001ě\u0002\u0018\u0001Ĝ\b\u0018\u001c��\u0007\u0018\u0001ĝ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001Ğ\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001ğ\u000b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Ġ\u0011\u0018\u001c��\u0007\u0018\u0001ġ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Ģ\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001ģ\r\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001Ĥ\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001ĥ\r\u0018\u0015��\u0001¥\u0002��\u0001¥\u0001õ\u0001��\u0001Ħ=¥\u0002¨\u0001«\u0001¨\u0002÷>¨\u0006��\u0001ħD��\u0002ü\u0003��\u0001ü\u0005��\u0002º\u0002»5��\u0002ü\u0003��\u0001ü>��\u0002þ\u0001��\u0003þ\u0001·\u0002þ\u0002��\u0004þ\u0007��\u0002þ\u0007��\u0001·$��\u0007\u0018\u0001Ĩ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001Ć\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001ĩ\u0011\u0018\u001c��\u0003\u0018\u0001Ī\u0005\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001ī\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ĭ\n\u0018\u001c��\u0007\u0018\u0001ĭ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0004\u0018\u0001Į\u000e\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001į\n\u0018\u001a��\u0001Ċ>��\u0004ċ\u0001ČCċ\u0001Č\u0001ċ\u0001İ=ċ\u0007��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001ı\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001Ĳ\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0001ĳ\u0002\u0018\u0002��\u0013\u0018\u001c��\u0002Ĵ\u0001��\u0003Ĵ\u0001��\u0002Ĵ\u0002��\u0004Ĵ\u0007��\u0002Ĵ,��\u0002ĵ\u0001��\u0003ĵ\u0001��\u0002ĵ\u0002��\u0004ĵ\u0007��\u0002ĵ&��\u0003ß\u0001��\u0001ß\u0001��\u0007\u0091\u0001Ķ\u0001\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\u0013\u0091\u0007��\u0001á\u0014��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001ķ\r\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001ĸ\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Ĺ\u0011\u0018\u001c��\u0007\u0018\u0001ĺ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ļ\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001ļ\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ľ\n\u0018\u001c��\u0007\u0018\u0001ľ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ŀ\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001ŀ\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0011\u0018\u0001Ł\u0001\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ł\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001Ń\n\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001ń\r\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001Ņ\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u000f\u0018\u0001ņ\u0003\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u000b\u0018\u0001Ň\u0007\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ň\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001ŉ\b\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001Ŋ\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ŋ\t\u0018\u001c��\t\u0018\u0002��\u0002\u0018\u0001Ō\u0001\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001ō\b\u0018\u001c��\u0002\u0018\u0001��\u0003\u0018\u0001��\u0002\u0018\u0002��\u0004\u0018\u0007��\u0002\u0018,��\u0002Ŏ\u0001��\u0003Ŏ\u0001��\u0002Ŏ\u0002��\u0004Ŏ\u0007��\u0002Ŏ&��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\b\u0091\u0001ŏ\n\u0091\u0007��\u0001á\u0014��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001Ő\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0004\u0018\u0001ő\u000e\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Œ\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001œ\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Ŕ\u0011\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ŕ\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0006\u0018\u0001Ŗ\f\u0018\u001c��\t\u0018\u0002��\u0001ŗ\u0003\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001Ř\r\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001ř\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001Ś\r\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001ś\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Ŝ\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\b\u0018\u0001ŝ\n\u0018\u001c��\u0007\u0018\u0001Ş\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\u0007\u0018\u0001ş\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001Š\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001š\t\u0018\u001c��\u0002\u0091\u0001��\u0003\u0091\u0001��\u0002\u0091\u0002��\u0004\u0091\u0007��\u0002\u0091&��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0001Ţ\u0003\u0091\u0001\u0092\u0003\u0091\u0002��\u0013\u0091\u0007��\u0001á\u0014��\u0007\u0018\u0001ţ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\u0007\u0018\u0001Ť\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ť\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001Ŧ\u0010\u0018\u001c��\u0007\u0018\u0001ŧ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001\u0018\u0001Ũ\u0011\u0018\u001c��\u0007\u0018\u0001ũ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\n\u0018\u0001Ū\b\u0018\u001c��\t\u0018\u0002��\u0001ū\u0003\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0007\u0018\u0001Ŭ\u000b\u0018\u0016��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\u0001\u0091\u0001ŭ\u0011\u0091\u0007��\u0001á\u0014��\u0007\u0018\u0001Ů\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ů\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001Ű\u0005\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0002\u0018\u0001ű\u0010\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001Ų\u0005\u0018\u001c��\u0007\u0018\u0001ų\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0001Ŵ\u0012\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\r\u0018\u0001ŵ\u0005\u0018\u0016��\u0003ß\u0001��\u0001ß\u0001��\t\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\u0002\u0091\u0001Ŷ\u0010\u0091\u0007��\u0001á\u0014��\t\u0018\u0002��\u0002\u0018\u0001ŷ\u0001\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001Ÿ\t\u0018\u001c��\u0007\u0018\u0001Ź\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\t\u0018\u0001ź\t\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0005\u0018\u0001Ż\r\u0018\u0016��\u0003ß\u0001��\u0001ß\u0001��\u0007\u0091\u0001ż\u0001\u0091\u0001��\u0001à\u0004\u0091\u0001\u0092\u0003\u0091\u0002��\u0013\u0091\u0007��\u0001á\u0014��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\f\u0018\u0001Ž\u0006\u0018\u001c��\t\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0010\u0018\u0001ž\u0002\u0018\u001c��\u0007\u0018\u0001ſ\u0001\u0018\u0002��\u0004\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u001c��\t\u0018\u0002��\u0002\u0018\u0001ƀ\u0001\u0018\u0001\u0089\u0003\u0018\u0002��\u0013\u0018\u0015��";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\u0013��\u0001\t\u0001\u0001\u0001\t\b\u0001\u0001\t\b\u0001\n\t\u0001\u0001\u0004\t\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0007\u0001\u0001\t\u0002\u0001\u0002\t\u0001\u0001\u0002\t\u0001\u0001\u0001\t\u0001\u0001\t\t\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0005\u0001\u0001\t\u0003\u0001\u0001\t\u0005\u0001\u0001\t\u0003\u0001\u0003\t\u0001\u0001\u0003\t\u0001\u0001\u0002\t\u0001\u0001\u0002\t\u0001\u0001\u0001\t\u0001\u0001\u0003\t\u0001\u0001\u0001\t\u0003��\u0001\u0001\u0001\t\u0001��\u0002\u0001\u0001��\u0002\u0001\u0005��\u000f\u0001\u0002\t\u0001\u0001\b��\u0002\u0001\u0001��\u0001\t\u0001��\u0005\t\u0002��\u0002\t\u0002\u0001\u0001��\u000b\u0001\u0002\t\u0001\u0001\b\t\u0003\u0001\u0001��\u0002\u0001\u0001\t\u0002\u0001\u0003��\u0001\t\u0002��\u0010\u0001\u0001��\u0002\u0001\u0001��\u0001\u0001\u0001\t\u0001��\u0001\t\u0001\u0001\u0001��\u000b\u0001\u0001\t\u0001\u0001\u0002��\u0005\u0001\u0003��\u0012\u0001\u0001\t\b\u0001\u0001\t\u0003\u0001\u0003��\u0017\u0001\u0002��\u0012\u0001\u0001��\n\u0001\u0001��\b\u0001\u0001��\n\u0001";
    private Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char[] zzBuffer;
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;
    private Stack zzStreams;
    private boolean[] zzFin;
    private int classDepth;
    private int parenDepth;
    private int nestingDepth;
    private int annotationDepth;
    private int assignmentDepth;
    private int stateDepth;
    private int codeblockDepth;
    private int[] stateStack;
    private int braceMode;
    private int parenMode;
    private String className;
    private boolean javaDocNewLine;
    private boolean javaDocStartedContent;
    private StringBuffer codeBody;
    private boolean newMode;
    private boolean bracketMode;
    private boolean anonymousMode;
    private boolean appendingToCodeBody;
    private boolean shouldCaptureCodeBody;
    private boolean isConstructor;
    private static final int[] ZZ_LEXSTATE = {0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14};
    private static final String ZZ_CMAP_PACKED = "\t\u0019\u0001\u0005\u0001\u0002\u0001��\u0001\u0003\u0001\u0001\u000e\u0019\u0004��\u0001\u0005\u0001>\u0001;\u0001��\u0001\u0018\u0001?\u00014\u0001<\u00016\u00011\u0001\u0004\u0001@\u0001\u001b\u0001\u0010\u0001\u0011\u0001\u0006\u0001\b\u0007\f\u0002\u0007\u0001=\u0001:\u00012\u00019\u00013\u00015\u0001\u001a\u0003\u000b\u0001\u0015\u0001\u000f\u0001\u0013\u0005\u0018\u0001\r\u000b\u0018\u0001\t\u0002\u0018\u0001/\u0001\u0016\u00010\u0001B\u0001\u0018\u0001��\u0001\u001d\u0001\n\u0001\u001e\u0001\u0014\u0001\u000e\u0001\u0012\u0001 \u0001+\u0001!\u0001\u0018\u0001\u001f\u0001&\u0001\"\u0001)\u0001#\u0001\u001c\u0001\u0018\u0001$\u0001(\u0001%\u0001\u0017\u0001'\u0001-\u0001.\u0001*\u0001,\u00017\u0001A\u00018\u0001C!\u0019\u0002��\u0004\u0018\u0004��\u0001\u0018\u0002��\u0001\u0019\u0007��\u0001\u0018\u0004��\u0001\u0018\u0005��\u0017\u0018\u0001��\u001f\u0018\u0001��Ŀ\u0018\u0019��r\u0018\u0004��\f\u0018\u000e��\u0005\u0018\t��\u0001\u0018\u0011��X\u0019\u0005��\u0013\u0019\n��\u0001\u0018\u000b��\u0001\u0018\u0001��\u0003\u0018\u0001��\u0001\u0018\u0001��\u0014\u0018\u0001��,\u0018\u0001��&\u0018\u0001��\u0005\u0018\u0004��\u0082\u0018\u0001��\u0004\u0019\u0003��E\u0018\u0001��&\u0018\u0002��\u0002\u0018\u0006��\u0010\u0018!��&\u0018\u0002��\u0001\u0018\u0007��'\u0018\t��\u0011\u0019\u0001��\u0017\u0019\u0001��\u0003\u0019\u0001��\u0001\u0019\u0001��\u0002\u0019\u0001��\u0001\u0019\u000b��\u001b\u0018\u0005��\u0003\u0018\r��\u0004\u0019\f��\u0006\u0019\u000b��\u001a\u0018\u0005��\u000b\u0018\u000e\u0019\u0007��\n\u0019\u0004��\u0002\u0018\u0001\u0019c\u0018\u0001��\u0001\u0018\b\u0019\u0001��\u0006\u0019\u0002\u0018\u0002\u0019\u0001��\u0004\u0019\u0002\u0018\n\u0019\u0003\u0018\u0002��\u0001\u0018\u000f��\u0001\u0019\u0001\u0018\u0001\u0019\u001e\u0018\u001b\u0019\u0002��\u0003\u00180��&\u0018\u000b\u0019\u0001\u0018ŏ��\u0003\u00196\u0018\u0002��\u0001\u0019\u0001\u0018\u0010\u0019\u0002��\u0001\u0018\u0004\u0019\u0003��\n\u0018\u0002\u0019\u0002��\n\u0019\u0011��\u0003\u0019\u0001��\b\u0018\u0002��\u0002\u0018\u0002��\u0016\u0018\u0001��\u0007\u0018\u0001��\u0001\u0018\u0003��\u0004\u0018\u0002��\u0001\u0019\u0001\u0018\u0007\u0019\u0002��\u0002\u0019\u0002��\u0003\u0019\t��\u0001\u0019\u0004��\u0002\u0018\u0001��\u0003\u0018\u0002\u0019\u0002��\n\u0019\u0004\u0018\r��\u0003\u0019\u0001��\u0006\u0018\u0004��\u0002\u0018\u0002��\u0016\u0018\u0001��\u0007\u0018\u0001��\u0002\u0018\u0001��\u0002\u0018\u0001��\u0002\u0018\u0002��\u0001\u0019\u0001��\u0005\u0019\u0004��\u0002\u0019\u0002��\u0003\u0019\u000b��\u0004\u0018\u0001��\u0001\u0018\u0007��\f\u0019\u0003\u0018\f��\u0003\u0019\u0001��\t\u0018\u0001��\u0003\u0018\u0001��\u0016\u0018\u0001��\u0007\u0018\u0001��\u0002\u0018\u0001��\u0005\u0018\u0002��\u0001\u0019\u0001\u0018\b\u0019\u0001��\u0003\u0019\u0001��\u0003\u0019\u0002��\u0001\u0018\u000f��\u0002\u0018\u0002\u0019\u0002��\n\u0019\u0001��\u0001\u0018\u000f��\u0003\u0019\u0001��\b\u0018\u0002��\u0002\u0018\u0002��\u0016\u0018\u0001��\u0007\u0018\u0001��\u0002\u0018\u0001��\u0005\u0018\u0002��\u0001\u0019\u0001\u0018\u0006\u0019\u0003��\u0002\u0019\u0002��\u0003\u0019\b��\u0002\u0019\u0004��\u0002\u0018\u0001��\u0003\u0018\u0004��\n\u0019\u0001��\u0001\u0018\u0010��\u0001\u0019\u0001\u0018\u0001��\u0006\u0018\u0003��\u0003\u0018\u0001��\u0004\u0018\u0003��\u0002\u0018\u0001��\u0001\u0018\u0001��\u0002\u0018\u0003��\u0002\u0018\u0003��\u0003\u0018\u0003��\b\u0018\u0001��\u0003\u0018\u0004��\u0005\u0019\u0003��\u0003\u0019\u0001��\u0004\u0019\t��\u0001\u0019\u000f��\t\u0019\t��\u0001\u0018\u0007��\u0003\u0019\u0001��\b\u0018\u0001��\u0003\u0018\u0001��\u0017\u0018\u0001��\n\u0018\u0001��\u0005\u0018\u0004��\u0007\u0019\u0001��\u0003\u0019\u0001��\u0004\u0019\u0007��\u0002\u0019\t��\u0002\u0018\u0004��\n\u0019\u0012��\u0002\u0019\u0001��\b\u0018\u0001��\u0003\u0018\u0001��\u0017\u0018\u0001��\n\u0018\u0001��\u0005\u0018\u0002��\u0001\u0019\u0001\u0018\u0007\u0019\u0001��\u0003\u0019\u0001��\u0004\u0019\u0007��\u0002\u0019\u0007��\u0001\u0018\u0001��\u0002\u0018\u0004��\n\u0019\u0012��\u0002\u0019\u0001��\b\u0018\u0001��\u0003\u0018\u0001��\u0017\u0018\u0001��\u0010\u0018\u0004��\u0006\u0019\u0002��\u0003\u0019\u0001��\u0004\u0019\t��\u0001\u0019\b��\u0002\u0018\u0004��\n\u0019\u0012��\u0002\u0019\u0001��\u0012\u0018\u0003��\u0018\u0018\u0001��\t\u0018\u0001��\u0001\u0018\u0002��\u0007\u0018\u0003��\u0001\u0019\u0004��\u0006\u0019\u0001��\u0001\u0019\u0001��\b\u0019\u0012��\u0002\u0019\r��0\u0018\u0001\u0019\u0002\u0018\u0007\u0019\u0004��\b\u0018\b\u0019\u0001��\n\u0019'��\u0002\u0018\u0001��\u0001\u0018\u0002��\u0002\u0018\u0001��\u0001\u0018\u0002��\u0001\u0018\u0006��\u0004\u0018\u0001��\u0007\u0018\u0001��\u0003\u0018\u0001��\u0001\u0018\u0001��\u0001\u0018\u0002��\u0002\u0018\u0001��\u0004\u0018\u0001\u0019\u0002\u0018\u0006\u0019\u0001��\u0002\u0019\u0001\u0018\u0002��\u0005\u0018\u0001��\u0001\u0018\u0001��\u0006\u0019\u0002��\n\u0019\u0002��\u0002\u0018\"��\u0001\u0018\u0017��\u0002\u0019\u0006��\n\u0019\u000b��\u0001\u0019\u0001��\u0001\u0019\u0001��\u0001\u0019\u0004��\u0002\u0019\b\u0018\u0001��\"\u0018\u0006��\u0014\u0019\u0001��\u0002\u0019\u0004\u0018\u0004��\b\u0019\u0001��$\u0019\t��\u0001\u00199��\"\u0018\u0001��\u0005\u0018\u0001��\u0002\u0018\u0001��\u0007\u0019\u0003��\u0004\u0019\u0006��\n\u0019\u0006��\u0006\u0018\u0004\u0019F��&\u0018\n��)\u0018\u0007��Z\u0018\u0005��D\u0018\u0005��R\u0018\u0006��\u0007\u0018\u0001��?\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��\u0007\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��'\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��\u001f\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��\u0007\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��\u0007\u0018\u0001��\u0007\u0018\u0001��\u0017\u0018\u0001��\u001f\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0002��\u0007\u0018\u0001��'\u0018\u0001��\u0013\u0018\u000e��\t\u0019.��U\u0018\f��ɬ\u0018\u0002��\b\u0018\n��\u001a\u0018\u0005��K\u0018\u0003��\u0003\u0018\u000f��\r\u0018\u0001��\u0004\u0018\u0003\u0019\u000b��\u0012\u0018\u0003\u0019\u000b��\u0012\u0018\u0002\u0019\f��\r\u0018\u0001��\u0003\u0018\u0001��\u0002\u0019\f��4\u0018 \u0019\u0003��\u0001\u0018\u0003��\u0002\u0018\u0001\u0019\u0002��\n\u0019!��\u0003\u0019\u0002��\n\u0019\u0006��X\u0018\b��)\u0018\u0001\u0019V��\u001d\u0018\u0003��\f\u0019\u0004��\f\u0019\n��\n\u0019\u001e\u0018\u0002��\u0005\u0018\u038b��l\u0018\u0094��\u009c\u0018\u0004��Z\u0018\u0006��\u0016\u0018\u0002��\u0006\u0018\u0002��&\u0018\u0002��\u0006\u0018\u0002��\b\u0018\u0001��\u0001\u0018\u0001��\u0001\u0018\u0001��\u0001\u0018\u0001��\u001f\u0018\u0002��5\u0018\u0001��\u0007\u0018\u0001��\u0001\u0018\u0003��\u0003\u0018\u0001��\u0007\u0018\u0003��\u0004\u0018\u0002��\u0006\u0018\u0004��\r\u0018\u0005��\u0003\u0018\u0001��\u0007\u0018\u000f��\u0004\u0019\u001a��\u0005\u0019\u0010��\u0002\u0018\u0013��\u0001\u0018\u000b��\u0004\u0019\u0006��\u0006\u0019\u0001��\u0001\u0018\r��\u0001\u0018 ��\u0012\u0018\u001e��\r\u0019\u0004��\u0001\u0019\u0003��\u0006\u0019\u0017��\u0001\u0018\u0004��\u0001\u0018\u0002��\n\u0018\u0001��\u0001\u0018\u0003��\u0005\u0018\u0006��\u0001\u0018\u0001��\u0001\u0018\u0001��\u0001\u0018\u0001��\u0004\u0018\u0001��\u0003\u0018\u0001��\u0007\u0018\u0003��\u0003\u0018\u0005��\u0005\u0018\u0016��$\u0018ກ��\u0003\u0018\u0019��\t\u0018\u0006\u0019\u0001��\u0005\u0018\u0002��\u0005\u0018\u0004��V\u0018\u0002��\u0002\u0019\u0002��\u0003\u0018\u0001��_\u0018\u0005��(\u0018\u0004��^\u0018\u0011��\u0018\u00188��\u0010\u0018Ȁ��ᦶ\u0018J��冦\u0018Z��ҍ\u0018ݳ��⮤\u0018⅜��Į\u0018\u0002��;\u0018\u0095��\u0007\u0018\f��\u0005\u0018\u0005��\u0001\u0018\u0001\u0019\n\u0018\u0001��\r\u0018\u0001��\u0005\u0018\u0001��\u0001\u0018\u0001��\u0002\u0018\u0001��\u0002\u0018\u0001��l\u0018!��ū\u0018\u0012��@\u0018\u0002��6\u0018(��\r\u0018\u0003��\u0010\u0019\u0010��\u0004\u0019\u000f��\u0002\u0018\u0018��\u0003\u0018\u0019��\u0001\u0018\u0006��\u0005\u0018\u0001��\u0087\u0018\u0002��\u0001\u0019\u0004��\u0001\u0018\u000b��\n\u0019\u0007��\u001a\u0018\u0004��\u0001\u0018\u0001��\u001a\u0018\n��Z\u0018\u0003��\u0006\u0018\u0002��\u0006\u0018\u0002��\u0006\u0018\u0002��\u0003\u0018\u0003��\u0002\u0018\u0003��\u0002\u0018\u0012��\u0003\u0019\u0004��";
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String[] ZZ_ERROR_MSG = {"Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"};
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static int[] zzUnpackAction() {
        int[] result = new int[384];
        zzUnpackAction(ZZ_ACTION_PACKED_0, 0, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int i2 = i;
            int i3 = i + 1;
            int count = packed.charAt(i2);
            i = i3 + 1;
            int value = packed.charAt(i3);
            do {
                int i4 = j;
                j++;
                result[i4] = value;
                count--;
            } while (count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[384];
        zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, 0, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int i2 = i;
            int i3 = i + 1;
            int high = packed.charAt(i2) << 16;
            int i4 = j;
            j++;
            i = i3 + 1;
            result[i4] = high | packed.charAt(i3);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[17136];
        zzUnpackTrans(ZZ_TRANS_PACKED_0, 0, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int i2 = i;
            int i3 = i + 1;
            int count = packed.charAt(i2);
            i = i3 + 1;
            int value = packed.charAt(i3);
            int value2 = value - 1;
            do {
                int i4 = j;
                j++;
                result[i4] = value2;
                count--;
            } while (count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[384];
        zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, 0, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int i2 = i;
            int i3 = i + 1;
            int count = packed.charAt(i2);
            i = i3 + 1;
            int value = packed.charAt(i3);
            do {
                int i4 = j;
                j++;
                result[i4] = value;
                count--;
            } while (count > 0);
        }
        return j;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: gencallgraphv3.jar:hamcrest-all-1.3.jar:org/hamcrest/generator/qdox/parser/impl/JFlexLexer$ZzFlexStreamInfo.class */
    public static final class ZzFlexStreamInfo {
        Reader zzReader;
        int zzEndRead;
        int zzStartRead;
        int zzCurrentPos;
        int zzMarkedPos;
        char[] zzBuffer;
        boolean zzAtEOF;
        boolean zzEOFDone = this.zzEOFDone;
        boolean zzEOFDone = this.zzEOFDone;

        ZzFlexStreamInfo(Reader zzReader, int zzEndRead, int zzStartRead, int zzCurrentPos, int zzMarkedPos, char[] zzBuffer, boolean zzAtEOF) {
            this.zzReader = zzReader;
            this.zzEndRead = zzEndRead;
            this.zzStartRead = zzStartRead;
            this.zzCurrentPos = zzCurrentPos;
            this.zzMarkedPos = zzMarkedPos;
            this.zzBuffer = zzBuffer;
            this.zzAtEOF = zzAtEOF;
        }
    }

    public void setCaptureCodeBody(boolean shouldCaptureCodeBody) {
        this.shouldCaptureCodeBody = shouldCaptureCodeBody;
    }

    @Override // org.hamcrest.generator.qdox.parser.Lexer
    public String text() {
        return yytext();
    }

    @Override // org.hamcrest.generator.qdox.parser.Lexer
    public int lex() throws IOException {
        return yylex();
    }

    @Override // org.hamcrest.generator.qdox.parser.Lexer
    public int getLine() {
        return this.yyline + 1;
    }

    @Override // org.hamcrest.generator.qdox.parser.Lexer
    public int getColumn() {
        return this.yycolumn + 1;
    }

    private void pushState(int newState) {
        int[] iArr = this.stateStack;
        int i = this.stateDepth;
        this.stateDepth = i + 1;
        iArr[i] = this.zzLexicalState;
        yybegin(newState);
    }

    private void popState() {
        int[] iArr = this.stateStack;
        int i = this.stateDepth - 1;
        this.stateDepth = i;
        yybegin(iArr[i]);
    }

    private int peekState(int relative) {
        if (relative > this.stateDepth) {
            return -1;
        }
        return this.stateStack[this.stateDepth - relative];
    }

    @Override // org.hamcrest.generator.qdox.parser.Lexer
    public String getCodeBody() {
        String s = this.codeBody.toString();
        this.codeBody = new StringBuffer(8192);
        return s;
    }

    public JFlexLexer(Reader in) {
        this.zzLexicalState = 0;
        this.zzBuffer = new char[16384];
        this.zzAtBOL = true;
        this.zzStreams = new Stack();
        this.zzFin = new boolean[16385];
        this.classDepth = 0;
        this.parenDepth = 0;
        this.nestingDepth = 0;
        this.annotationDepth = 0;
        this.assignmentDepth = 0;
        this.stateDepth = 0;
        this.codeblockDepth = 0;
        this.stateStack = new int[10];
        this.braceMode = 8;
        this.parenMode = -1;
        this.codeBody = new StringBuffer(8192);
        this.zzReader = in;
    }

    public JFlexLexer(InputStream in) {
        this(new InputStreamReader(in));
    }

    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[65536];
        int i = 0;
        int j = 0;
        while (i < 1778) {
            int i2 = i;
            int i3 = i + 1;
            int count = packed.charAt(i2);
            i = i3 + 1;
            char value = packed.charAt(i3);
            do {
                int i4 = j;
                j++;
                map[i4] = value;
                count--;
            } while (count > 0);
        }
        return map;
    }

    private boolean zzRefill() throws IOException {
        int c;
        if (this.zzStartRead > 0) {
            System.arraycopy(this.zzBuffer, this.zzStartRead, this.zzBuffer, 0, this.zzEndRead - this.zzStartRead);
            this.zzEndRead -= this.zzStartRead;
            this.zzCurrentPos -= this.zzStartRead;
            this.zzMarkedPos -= this.zzStartRead;
            this.zzStartRead = 0;
        }
        if (this.zzCurrentPos >= this.zzBuffer.length) {
            char[] newBuffer = new char[this.zzCurrentPos * 2];
            System.arraycopy(this.zzBuffer, 0, newBuffer, 0, this.zzBuffer.length);
            this.zzBuffer = newBuffer;
        }
        int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead, this.zzBuffer.length - this.zzEndRead);
        if (numRead > 0) {
            this.zzEndRead += numRead;
            return false;
        } else if (numRead != 0 || (c = this.zzReader.read()) == -1) {
            return true;
        } else {
            char[] cArr = this.zzBuffer;
            int i = this.zzEndRead;
            this.zzEndRead = i + 1;
            cArr[i] = (char) c;
            return false;
        }
    }

    public final void yyclose() throws IOException {
        this.zzAtEOF = true;
        this.zzEndRead = this.zzStartRead;
        if (this.zzReader != null) {
            this.zzReader.close();
        }
    }

    public final void yypushStream(Reader reader) {
        this.zzStreams.push(new ZzFlexStreamInfo(this.zzReader, this.zzEndRead, this.zzStartRead, this.zzCurrentPos, this.zzMarkedPos, this.zzBuffer, this.zzAtEOF));
        this.zzAtEOF = false;
        this.zzBuffer = new char[16384];
        this.zzReader = reader;
        this.zzStartRead = 0;
        this.zzEndRead = 0;
        this.zzMarkedPos = 0;
        this.zzCurrentPos = 0;
    }

    public final void yypopStream() throws IOException {
        this.zzReader.close();
        ZzFlexStreamInfo s = (ZzFlexStreamInfo) this.zzStreams.pop();
        this.zzBuffer = s.zzBuffer;
        this.zzReader = s.zzReader;
        this.zzStartRead = s.zzStartRead + this.zzEndRead + 2;
        this.zzEndRead = s.zzEndRead;
        this.zzCurrentPos = s.zzCurrentPos;
        this.zzMarkedPos = s.zzMarkedPos;
        this.zzAtEOF = s.zzAtEOF;
        this.zzEOFDone = s.zzEOFDone;
    }

    public final boolean yymoreStreams() {
        return !this.zzStreams.isEmpty();
    }

    public final void yyreset(Reader reader) {
        this.zzReader = reader;
        this.zzAtBOL = true;
        this.zzAtEOF = false;
        this.zzEOFDone = false;
        this.zzStartRead = 0;
        this.zzEndRead = 0;
        this.zzMarkedPos = 0;
        this.zzCurrentPos = 0;
        this.yychar = 0;
        this.zzLexicalState = 0;
    }

    public final int yystate() {
        return this.zzLexicalState;
    }

    public final void yybegin(int newState) {
        this.zzLexicalState = newState;
    }

    public final String yytext() {
        return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
    }

    public final char yycharat(int pos) {
        return this.zzBuffer[this.zzStartRead + pos];
    }

    public final int yylength() {
        return this.zzMarkedPos - this.zzStartRead;
    }

    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(2);
        }
        this.zzMarkedPos -= number;
    }

    private void zzDoEOF() throws IOException {
        if (!this.zzEOFDone) {
            this.zzEOFDone = true;
            yyclose();
        }
    }

    public int yylex() throws IOException {
        int zzInput;
        boolean zzPeek;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        while (true) {
            int zzMarkedPosL = this.zzMarkedPos;
            int zzEndReadL = this.zzEndRead;
            char[] zzBufferL = this.zzBuffer;
            char[] zzCMapL = ZZ_CMAP;
            boolean zzR = false;
            for (int zzCurrentPosL = this.zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\n':
                        if (zzR) {
                            zzR = false;
                            break;
                        } else {
                            this.yyline++;
                            this.yycolumn = 0;
                            break;
                        }
                    case 11:
                    case '\f':
                    case 133:
                    case 8232:
                    case 8233:
                        this.yyline++;
                        this.yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        this.yyline++;
                        this.yycolumn = 0;
                        zzR = true;
                        break;
                    default:
                        zzR = false;
                        this.yycolumn++;
                        break;
                }
            }
            if (zzR) {
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (this.zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = this.zzEndRead;
                    zzMarkedPosL = this.zzMarkedPos;
                    zzBufferL = this.zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    this.yyline--;
                }
            }
            int zzAction = -1;
            int i = zzMarkedPosL;
            this.zzStartRead = i;
            this.zzCurrentPos = i;
            int zzCurrentPosL2 = i;
            this.zzState = ZZ_LEXSTATE[this.zzLexicalState];
            while (true) {
                if (zzCurrentPosL2 < zzEndReadL) {
                    int i2 = zzCurrentPosL2;
                    zzCurrentPosL2++;
                    zzInput = zzBufferL[i2];
                } else if (this.zzAtEOF) {
                    zzInput = 65535;
                } else {
                    this.zzCurrentPos = zzCurrentPosL2;
                    this.zzMarkedPos = zzMarkedPosL;
                    boolean eof2 = zzRefill();
                    int zzCurrentPosL3 = this.zzCurrentPos;
                    zzMarkedPosL = this.zzMarkedPos;
                    zzBufferL = this.zzBuffer;
                    zzEndReadL = this.zzEndRead;
                    if (eof2) {
                        zzInput = -1;
                    } else {
                        zzCurrentPosL2 = zzCurrentPosL3 + 1;
                        zzInput = zzBufferL[zzCurrentPosL3];
                    }
                }
                int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
                if (zzNext != -1) {
                    this.zzState = zzNext;
                    int zzAttributes = zzAttrL[this.zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = this.zzState;
                        zzMarkedPosL = zzCurrentPosL2;
                        if ((zzAttributes & 8) == 8) {
                        }
                    }
                }
            }
            this.zzMarkedPos = zzMarkedPosL;
            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append(yytext());
                        break;
                    } else {
                        break;
                    }
                case 2:
                    return 261;
                case 3:
                    return 330;
                case 4:
                    return 258;
                case 5:
                    return 316;
                case 6:
                    return 260;
                case 7:
                    this.nestingDepth++;
                    return Parser.SQUAREOPEN;
                case 8:
                    this.nestingDepth--;
                    return Parser.SQUARECLOSE;
                case 9:
                    this.nestingDepth--;
                    return Parser.PARENCLOSE;
                case 10:
                    return Parser.LESSTHAN;
                case 11:
                    return Parser.GREATERTHAN;
                case 12:
                    return 310;
                case 13:
                    return 314;
                case 14:
                    this.nestingDepth++;
                    if (this.parenMode >= 0) {
                        this.annotationDepth = this.nestingDepth;
                        pushState(this.parenMode);
                        this.parenMode = -1;
                        return Parser.PARENOPEN;
                    }
                    return Parser.PARENOPEN;
                case 15:
                    if (this.braceMode >= 0) {
                        if (this.braceMode == 28) {
                            this.isConstructor = true;
                        } else if (this.braceMode == 8) {
                            getCodeBody();
                            this.appendingToCodeBody = true;
                        }
                        pushState(this.braceMode);
                        this.braceMode = -1;
                        yypushback(1);
                        break;
                    } else {
                        this.nestingDepth++;
                        this.braceMode = 8;
                        return Parser.BRACEOPEN;
                    }
                case 16:
                    this.nestingDepth--;
                    this.classDepth--;
                    popState();
                    this.braceMode = 8;
                    return Parser.BRACECLOSE;
                case 17:
                    this.assignmentDepth = this.nestingDepth;
                    getCodeBody();
                    this.appendingToCodeBody = true;
                    pushState(12);
                    break;
                case 18:
                    return 257;
                case 19:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append('\"');
                    }
                    pushState(14);
                    break;
                case 20:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append('\'');
                    }
                    pushState(16);
                    break;
                case 21:
                    yypushback(1);
                    pushState(6);
                    break;
                case 22:
                    pushState(6);
                    break;
                case 23:
                    yypushback(1);
                    pushState(4);
                    break;
                case 24:
                    popState();
                    return 332;
                case 25:
                    popState();
                    pushState(6);
                    break;
                case 26:
                    popState();
                    return 332;
                case 27:
                    this.codeBody.append(yytext());
                    break;
                case 28:
                    int i3 = this.codeblockDepth;
                    this.codeblockDepth = i3 + 1;
                    if (i3 > 0) {
                        this.codeBody.append('{');
                        break;
                    } else {
                        break;
                    }
                case 29:
                    int i4 = this.codeblockDepth - 1;
                    this.codeblockDepth = i4;
                    if (i4 == 0) {
                        popState();
                        this.appendingToCodeBody = false;
                        this.braceMode = 8;
                        return 320;
                    }
                    this.codeBody.append('}');
                    break;
                case 30:
                    this.nestingDepth--;
                    if (this.appendingToCodeBody) {
                        this.codeBody.append(")");
                    }
                    if (this.nestingDepth == this.parenDepth) {
                        popState();
                        break;
                    } else {
                        break;
                    }
                case 31:
                    this.nestingDepth++;
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("(");
                        break;
                    } else {
                        break;
                    }
                case 32:
                    if (this.nestingDepth == this.assignmentDepth) {
                        this.appendingToCodeBody = true;
                        popState();
                        return 260;
                    }
                    this.codeBody.append(',');
                    break;
                case 33:
                    this.codeBody.append('[');
                    this.bracketMode = true;
                    this.nestingDepth++;
                    break;
                case 34:
                    this.codeBody.append(']');
                    this.bracketMode = false;
                    this.nestingDepth--;
                    break;
                case 35:
                    this.codeBody.append(')');
                    this.nestingDepth--;
                    if (this.nestingDepth < this.assignmentDepth) {
                        this.appendingToCodeBody = true;
                        popState();
                        return Parser.PARENCLOSE;
                    }
                    break;
                case 36:
                    this.codeBody.append('<');
                    if (!this.bracketMode && this.newMode && !this.anonymousMode) {
                        this.nestingDepth++;
                        break;
                    }
                    break;
                case 37:
                    this.codeBody.append('>');
                    if (!this.anonymousMode && !this.bracketMode && this.newMode) {
                        this.nestingDepth--;
                        if (this.nestingDepth == this.assignmentDepth) {
                            this.newMode = false;
                            break;
                        } else {
                            break;
                        }
                    }
                    break;
                case 38:
                    this.codeBody.append('(');
                    int i5 = this.nestingDepth;
                    this.nestingDepth = i5 + 1;
                    this.parenDepth = i5;
                    pushState(10);
                    break;
                case 39:
                    this.codeBody.append('{');
                    this.anonymousMode = true;
                    this.nestingDepth++;
                    break;
                case 40:
                    this.codeBody.append('}');
                    if (this.anonymousMode) {
                        this.nestingDepth--;
                        if (this.nestingDepth == this.assignmentDepth) {
                            this.anonymousMode = false;
                            break;
                        } else {
                            break;
                        }
                    } else {
                        break;
                    }
                case 41:
                    if (this.nestingDepth == this.assignmentDepth) {
                        this.appendingToCodeBody = true;
                        this.newMode = false;
                        popState();
                        return 257;
                    }
                    this.codeBody.append(';');
                    break;
                case 42:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append('\"');
                    }
                    popState();
                    break;
                case 43:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append('\'');
                    }
                    popState();
                    break;
                case 44:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append(yytext());
                    }
                    popState();
                    break;
                case 45:
                    return 266;
                case 46:
                    return 334;
                case 47:
                    return 268;
                case 48:
                    int i6 = this.nestingDepth;
                    this.nestingDepth = i6 - 1;
                    if (i6 == this.annotationDepth) {
                        popState();
                        return Parser.PARENCLOSE;
                    }
                    return Parser.PARENCLOSE;
                case 49:
                    this.nestingDepth++;
                    return Parser.PARENOPEN;
                case 50:
                    this.nestingDepth++;
                    return Parser.BRACEOPEN;
                case 51:
                    this.nestingDepth--;
                    return Parser.BRACECLOSE;
                case 52:
                    return 263;
                case 53:
                    this.appendingToCodeBody = true;
                    this.codeBody.append("\"");
                    pushState(24);
                    break;
                case 54:
                    this.appendingToCodeBody = true;
                    this.codeBody.append("'");
                    pushState(26);
                    break;
                case 55:
                    return 315;
                case 56:
                    return 304;
                case 57:
                    return 262;
                case 58:
                    return 267;
                case 59:
                    return 311;
                case 60:
                    return 312;
                case 61:
                    return 309;
                case 62:
                    this.codeBody.append("\"");
                    popState();
                    this.appendingToCodeBody = false;
                    return 339;
                case 63:
                    this.codeBody.append("'");
                    popState();
                    this.appendingToCodeBody = false;
                    return 338;
                case 64:
                    this.nestingDepth++;
                    if (this.parenMode >= 0) {
                        this.annotationDepth = this.nestingDepth;
                        pushState(this.parenMode);
                        this.parenMode = -1;
                        return Parser.PARENOPEN;
                    } else if (this.isConstructor) {
                        this.parenDepth = this.classDepth;
                        pushState(10);
                        return 321;
                    } else {
                        return Parser.PARENOPEN;
                    }
                case 65:
                    this.isConstructor = false;
                    return 257;
                case 66:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("/*");
                    }
                    pushState(20);
                    break;
                case 67:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("//");
                    }
                    pushState(18);
                    break;
                case 68:
                    popState();
                    yypopStream();
                    return 318;
                case 69:
                    yypushback(1);
                    pushState(4);
                    break;
                case 70:
                    return 331;
                case 71:
                    popState();
                    popState();
                    yypopStream();
                    return 318;
                case 72:
                    yypushback(1);
                    this.codeBody.append('.');
                    this.newMode = true;
                    break;
                case 73:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("\\\\");
                        break;
                    } else {
                        break;
                    }
                case 74:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("\\\"");
                        break;
                    } else {
                        break;
                    }
                case 75:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("\\'");
                        break;
                    } else {
                        break;
                    }
                case 76:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("*/");
                    }
                    popState();
                    break;
                case 77:
                    return 335;
                case 78:
                    return 336;
                case 79:
                    return 337;
                case 80:
                    return 301;
                case 81:
                    return Parser.LESSEQUALS;
                case 82:
                    return 302;
                case 83:
                    return 300;
                case 84:
                    return 305;
                case 85:
                    return 307;
                case 86:
                    return 308;
                case 87:
                    return 306;
                case 88:
                    this.codeBody.append("\\\\");
                    break;
                case 89:
                    this.codeBody.append("\\\"");
                    break;
                case 90:
                    this.codeBody.append("\\'");
                    break;
                case 91:
                    return 259;
                case 92:
                    this.parenMode = 22;
                    yypushback(text().length() - 1);
                    getCodeBody();
                    return 316;
                case 93:
                    int zzFState = 15;
                    int zzFPos = this.zzStartRead;
                    if (this.zzFin.length <= zzBufferL.length) {
                        this.zzFin = new boolean[zzBufferL.length + 1];
                    }
                    boolean[] zzFinL = this.zzFin;
                    while (zzFState != -1 && zzFPos < this.zzMarkedPos) {
                        if ((zzAttrL[zzFState] & 1) == 1) {
                            zzFinL[zzFPos] = true;
                        }
                        int i7 = zzFPos;
                        zzFPos++;
                        zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzBufferL[i7]]];
                    }
                    if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
                        zzFinL[zzFPos] = true;
                    }
                    int zzFState2 = 16;
                    int zzFPos2 = this.zzMarkedPos;
                    while (true) {
                        if (!zzFinL[zzFPos2] || (zzAttrL[zzFState2] & 1) != 1) {
                            zzFPos2--;
                            zzFState2 = zzTransL[zzRowMapL[zzFState2] + zzCMapL[zzBufferL[zzFPos2]]];
                        } else {
                            this.zzMarkedPos = zzFPos2;
                            popState();
                            return 332;
                        }
                    }
                    break;
                case 94:
                    this.codeBody.append("new");
                    if (this.nestingDepth == this.assignmentDepth) {
                        this.newMode = true;
                        break;
                    } else {
                        break;
                    }
                case 95:
                    return 324;
                case 96:
                    return 303;
                case 97:
                    if (this.appendingToCodeBody) {
                        this.codeBody.append("/**/");
                        break;
                    } else {
                        break;
                    }
                case 98:
                    this.classDepth++;
                    this.braceMode = 28;
                    return 284;
                case 99:
                    int zzFState3 = 17;
                    int zzFPos3 = this.zzStartRead;
                    if (this.zzFin.length <= zzBufferL.length) {
                        this.zzFin = new boolean[zzBufferL.length + 1];
                    }
                    boolean[] zzFinL2 = this.zzFin;
                    while (zzFState3 != -1 && zzFPos3 < this.zzMarkedPos) {
                        if ((zzAttrL[zzFState3] & 1) == 1) {
                            zzFinL2[zzFPos3] = true;
                        }
                        int i8 = zzFPos3;
                        zzFPos3++;
                        zzFState3 = zzTransL[zzRowMapL[zzFState3] + zzCMapL[zzBufferL[i8]]];
                    }
                    if (zzFState3 != -1 && (zzAttrL[zzFState3] & 1) == 1) {
                        zzFinL2[zzFPos3] = true;
                    }
                    int zzFState4 = 18;
                    int zzFPos4 = this.zzMarkedPos;
                    while (true) {
                        if (!zzFinL2[zzFPos4] || (zzAttrL[zzFState4] & 1) != 1) {
                            zzFPos4--;
                            zzFState4 = zzTransL[zzRowMapL[zzFState4] + zzCMapL[zzBufferL[zzFPos4]]];
                        } else {
                            this.zzMarkedPos = zzFPos4;
                            popState();
                            return 331;
                        }
                    }
                    break;
                case 100:
                    return 322;
                case 101:
                    return 326;
                case 102:
                    return 333;
                case 103:
                    return 325;
                case 104:
                    pushState(2);
                    yypushStream(new StringReader(text().substring(2)));
                    return 317;
                case 105:
                    return 275;
                case 106:
                    this.classDepth++;
                    this.braceMode = 0;
                    return 282;
                case 107:
                    return Parser.SUPER;
                case 108:
                    return 327;
                case 109:
                    return 282;
                case 110:
                    return 323;
                case 111:
                    return 271;
                case 112:
                    return 270;
                case 113:
                    return 286;
                case 114:
                    return 274;
                case 115:
                    return 277;
                case 116:
                    return 328;
                case 117:
                    return 287;
                case 118:
                    this.assignmentDepth = this.nestingDepth;
                    this.appendingToCodeBody = true;
                    pushState(12);
                    break;
                case 119:
                    return 269;
                case 120:
                    return 273;
                case 121:
                    return 276;
                case 122:
                    return 281;
                case 123:
                    return 278;
                case 124:
                    return 272;
                case 125:
                    this.classDepth++;
                    this.braceMode = 0;
                    return 283;
                case 126:
                    return 280;
                case 127:
                    this.classDepth++;
                    this.braceMode = 0;
                    return 285;
                case 128:
                    return Parser.IMPLEMENTS;
                case 129:
                    return 279;
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case sym.i_ixor /* 227 */:
                case sym.i_jsr /* 228 */:
                case sym.i_jsr_w /* 229 */:
                case sym.i_l2d /* 230 */:
                case sym.i_l2f /* 231 */:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 240:
                case sym.i_ldc_w /* 241 */:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 251:
                case 252:
                case sym.i_lrem /* 253 */:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                    break;
                default:
                    if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
                        this.zzAtEOF = true;
                        zzDoEOF();
                        return 0;
                    }
                    zzScanError(1);
                    break;
            }
        }
    }
}
