package scm.autogen;

import java.io.PrintStream;
import java.util.Date;
import soot.dava.internal.AST.ASTNode;
import soot.jimple.Jimple;
/* compiled from: autogen.java */
/* loaded from: gencallgraphv3.jar:jasmin-3.0.3-SNAPSHOT.jar:scm/autogen/typeinfo.class */
class typeinfo {
    String scm_name;
    String java_name;
    String[] java_inp_type;

    /* JADX INFO: Access modifiers changed from: package-private */
    public typeinfo(String sname, String jname, String[] jit) {
        this.scm_name = sname;
        this.java_name = jname;
        this.java_inp_type = jit;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void write(PrintStream out) {
        int mode;
        out.println("//Autogenerated by typeinfo on " + new Date());
        out.println("class scm" + this.java_name + " extends Procedure implements Obj");
        out.println("{");
        out.println("  Obj apply(Cell args, Env f)\n  throws Exception\n  {");
        out.println("    Cell t = args;");
        out.println("    Obj  tmp;");
        for (int i = 0; i < this.java_inp_type.length; i++) {
            out.println("    if (t == null) { throw new SchemeError(\"" + this.scm_name + " expects " + this.java_inp_type.length + " arguments\"); }");
            out.println("    tmp = (t.car!=null)?t.car.eval(f):null; t = t.cdr;");
            if (this.java_inp_type[i].equals("String")) {
                mode = 0;
            } else if (this.java_inp_type[i].equals("short") || this.java_inp_type[i].equals("int") || this.java_inp_type[i].equals("long")) {
                mode = 1;
            } else {
                mode = (this.java_inp_type[i].equals(Jimple.FLOAT) || this.java_inp_type[i].equals("double")) ? 3 : 2;
            }
            switch (mode) {
                case 0:
                    out.println("    if ((tmp != null) && !(tmp instanceof Selfrep)) { throw new SchemeError(\"" + this.scm_name + " expects a String for arg #" + (i + 1) + "\"); }");
                    out.println("    String arg" + i + " = (tmp!=null)?((Selfrep)tmp).val:null;");
                    break;
                case 1:
                case 3:
                    out.println("    if (!(tmp instanceof Selfrep)) { throw new SchemeError(\"" + this.scm_name + " expects a number for arg #" + (i + 1) + "\"); }");
                    if (mode == 1) {
                        out.println(ASTNode.TAB + this.java_inp_type[i] + " arg" + i + " = (" + this.java_inp_type[i] + ")(Math.round(((Selfrep)tmp).num));");
                        break;
                    } else {
                        out.println(ASTNode.TAB + this.java_inp_type[i] + " arg" + i + " = (" + this.java_inp_type[i] + ")(((Selfrep)tmp).num);");
                        break;
                    }
                case 2:
                default:
                    out.println("    if ((tmp != null) && !(tmp instanceof primnode)) { throw new SchemeError(\"" + this.scm_name + " expects a " + this.java_inp_type[i] + " for arg #" + (i + 1) + "\"); }");
                    out.println("    if ((tmp != null) && !((((primnode)tmp).val) instanceof " + this.java_inp_type[i] + ")) { throw new SchemeError(\"" + this.scm_name + " expects a " + this.java_inp_type[i] + " for arg #" + (i + 1) + "\"); }");
                    out.println(ASTNode.TAB + this.java_inp_type[i] + " arg" + i + " = (tmp != null)?(" + this.java_inp_type[i] + ")(((primnode)tmp).val):null;");
                    break;
            }
        }
        out.print("    return new primnode(new " + this.java_name + "(");
        if (this.java_inp_type.length != 0) {
            out.print("arg0");
        }
        for (int i2 = 1; i2 < this.java_inp_type.length; i2++) {
            out.print(", arg" + i2);
        }
        out.println("));\n  }");
        out.println("  public String toString()");
        out.println("  { return (\"<#" + this.scm_name + "#>\"); }");
        out.println("}");
    }
}
